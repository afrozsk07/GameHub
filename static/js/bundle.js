let board=null;let game=null;let mode=null;let aiLevel=null;let isPlayerWhite=true;let statusElement=null;function onDragStart(source,piece,position,orientation){if(game.game_over())return false;if(mode!=='human'){if((game.turn()==='w'&&!isPlayerWhite&&piece.search(/^w/)!==-1)||(game.turn()==='b'&&isPlayerWhite&&piece.search(/^b/)!==-1)){return false;}}}
function makeRandomMove(){const possibleMoves=game.moves();if(possibleMoves.length===0)return;const move=possibleMoves[Math.floor(Math.random()*possibleMoves.length)];game.move(move);board.position(game.fen());updateStatus();}
function minimax(depth,isMaximizing){if(depth===0||game.game_over()){return evaluateBoard(game.board());}
const moves=game.moves();let bestEval=isMaximizing?-Infinity:Infinity;for(let move of moves){game.move(move);const evalScore=minimax(depth-1,!isMaximizing);game.undo();if(isMaximizing){if(evalScore>bestEval)bestEval=evalScore;}else{if(evalScore<bestEval)bestEval=evalScore;}}
return bestEval;}
function evaluateBoard(boardArr){const pieceValues={p:1,n:3,b:3,r:5,q:9,k:0};let evalScore=0;for(let row of boardArr){for(let piece of row){if(!piece)continue;const value=pieceValues[piece.type]||0;evalScore+=piece.color==='w'?value:-value;}}
return evalScore;}
function getBestMove(depth){let bestMove=null;let bestEval=-Infinity;for(let move of game.moves()){game.move(move);const evalScore=-minimax(depth-1,false);game.undo();if(evalScore>bestEval){bestEval=evalScore;bestMove=move;}}
return bestMove;}
function makeAIMove(){if(aiLevel==='easy'){makeRandomMove();}else{let depth=aiLevel==='medium'?2:3;const move=getBestMove(depth);if(move){game.move(move);board.position(game.fen());updateStatus();}}}
function onDrop(source,target){let move=game.move({from:source,to:target,promotion:'q'});if(move===null)return'snapback';updateStatus();if(mode!=='human'&&!game.game_over()){setTimeout(makeAIMove,400);}}
function updateStatus(){let status='';let moveColor=game.turn()==='w'?'White':'Black';if(game.in_checkmate()){status='Game over, '+(game.turn()==='w'?'Black':'White')+' wins by checkmate!';}else if(game.in_draw()){status='Game over, drawn position.';}else{status=moveColor+' to move';if(game.in_check()){status+=' (in check)';}}
if(statusElement)statusElement.textContent=status;}
function onSnapEnd(){board.position(game.fen());}
function startNewGame(){game=new Chess();board.orientation('white');board.position(game.fen());updateStatus();}
function showChessArea(){document.getElementById('mode-selection').classList.add('hidden');document.getElementById('difficulty-selection').classList.add('hidden');document.getElementById('chess-area').classList.remove('hidden');if(!board){statusElement=document.getElementById('chess-status');board=Chessboard('chess-board-container',{draggable:true,position:'start',width:400,pieceTheme:'https://chessboardjs.com/img/chesspieces/wikipedia/{piece}.png',onDragStart:onDragStart,onDrop:onDrop,onSnapEnd:onSnapEnd});document.getElementById('newGameBtn').addEventListener('click',startNewGame);}
startNewGame();}
document.addEventListener('DOMContentLoaded',()=>{document.getElementById('chess-area').classList.add('hidden');document.getElementById('difficulty-selection').classList.add('hidden');document.getElementById('select-human').addEventListener('click',()=>{mode='human';aiLevel=null;showChessArea();});document.getElementById('select-computer').addEventListener('click',()=>{document.getElementById('mode-selection').classList.add('hidden');document.getElementById('difficulty-selection').classList.remove('hidden');});document.querySelectorAll('.difficulty-btn').forEach(btn=>{btn.addEventListener('click',(e)=>{mode='computer';aiLevel=e.target.getAttribute('data-difficulty');showChessArea();});});});class Toast{static show(message,type='success',duration=3000){const toast=document.createElement('div');toast.className=`toast toast-${type}animate-fade-in`;toast.textContent=message;document.body.appendChild(toast);setTimeout(()=>{toast.classList.remove('animate-fade-in');toast.classList.add('animate-fade-out');setTimeout(()=>toast.remove(),500);},duration);}}
class GameState{static async save(gameType,stateData){try{const response=await fetch('/games/save-state',{method:'POST',headers:{'Content-Type':'application/json',},body:JSON.stringify({gameType,stateData}),});return await response.json();}catch(error){console.error('Error saving game state:',error);Toast.show('Failed to save game state','error');}}
static async load(gameType){try{const response=await fetch(`/games/load-state/${gameType}`);return await response.json();}catch(error){console.error('Error loading game state:',error);Toast.show('Failed to load game state','error');}}}
class ScoreManager{static async submitScore(gameType,score){try{const response=await fetch('/games/submit-score',{method:'POST',headers:{'Content-Type':'application/json',},body:JSON.stringify({gameType,score}),});const data=await response.json();if(data.highScore){Toast.show('New High Score!','success');}
return data;}catch(error){console.error('Error submitting score:',error);Toast.show('Failed to submit score','error');}}
static async getLeaderboard(gameType){try{const response=await fetch(`/games/leaderboard/${gameType}`);return await response.json();}catch(error){console.error('Error loading leaderboard:',error);Toast.show('Failed to load leaderboard','error');}}}
const animate={fadeIn:(element,duration=500)=>{element.style.opacity=0;element.style.display='block';element.style.transition=`opacity ${duration}ms`;setTimeout(()=>element.style.opacity=1,10);},fadeOut:(element,duration=500)=>{element.style.opacity=1;element.style.transition=`opacity ${duration}ms`;element.style.opacity=0;setTimeout(()=>element.style.display='none',duration);},shake:(element)=>{element.classList.add('animate-shake');setTimeout(()=>element.classList.remove('animate-shake'),500);}};class SoundManager{static sounds={};static preload(soundEffects){for(const[name,url]of Object.entries(soundEffects)){const audio=new Audio(url);this.sounds[name]=audio;}}
static play(name){if(this.sounds[name]){this.sounds[name].currentTime=0;this.sounds[name].play();}}}
function delegate(element,eventType,selector,handler){element.addEventListener(eventType,(event)=>{const target=event.target.closest(selector);if(target&&element.contains(target)){handler.call(target,event);}});}
function createResponsiveGrid(container,itemCount,minWidth=100){const containerWidth=container.offsetWidth;const columns=Math.floor(containerWidth/minWidth);container.style.gridTemplateColumns=`repeat(${columns},1fr)`;}
window.GameUtils={Toast,GameState,ScoreManager,animate,SoundManager,delegate,createResponsiveGrid};document.addEventListener('DOMContentLoaded',()=>{});